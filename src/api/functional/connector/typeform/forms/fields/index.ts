/**
 * @packageDocumentation
 * @module api.functional.connector.typeform.forms.fields
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { ITypeform } from "../../../../../structures/connector/typeform/ITypeform";

/**
 * 랭킹, 드롭다운, 다중선택 질문의 옵션을 업데이트 할 폼의 필드 정보 가져오기.
 *
 * @summary 타입폼 업데이트 할 폼의 필드 정보 가져오기.
 * @param formId 업데이트 할 폼의 ID.
 * @returns 폼의 필드 ID와 필드명.
 * @tag Typeform
 * @internal
 *
 * @controller TypeformController.getFieldsForUpdateFieldValue
 * @path GET /connector/typeform/forms/:formId/fields
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getFieldsForUpdateFieldValue(
  connection: IConnection,
  formId: string,
): Promise<getFieldsForUpdateFieldValue.Output> {
  return !!connection.simulate
    ? getFieldsForUpdateFieldValue.simulate(connection, formId)
    : PlainFetcher.fetch(connection, {
        ...getFieldsForUpdateFieldValue.METADATA,
        path: getFieldsForUpdateFieldValue.path(formId),
      });
}
export namespace getFieldsForUpdateFieldValue {
  export type Output = Primitive<
    Array<ITypeform.IFieldInfoForUpdateFieldValueOutput>
  >;

  export const METADATA = {
    method: "GET",
    path: "/connector/typeform/forms/:formId/fields",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (formId: string) =>
    `/connector/typeform/forms/${encodeURIComponent(formId ?? "null")}/fields`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<
    Primitive<Array<ITypeform.IFieldInfoForUpdateFieldValueOutput>>
  > =>
    typia.random<
      Primitive<Array<ITypeform.IFieldInfoForUpdateFieldValueOutput>>
    >(g);
  export const simulate = (connection: IConnection, formId: string): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(formId),
      contentType: "application/json",
    });
    assert.param("formId")(() => typia.assert(formId));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
