/**
 * @packageDocumentation
 * @module api.functional.connector.typeform.get_forms
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { ITypeform } from "../../../../structures/connector/typeform/ITypeform";

/**
 * 워크스페이스에 존재하는 폼 목록을 가져옵니다.
 *
 * @summary 타입폼 폼 목록 가져오기.
 * @returns 폼 ID, 제목.
 * @tag Typeform
 * @internal
 *
 * @controller TypeformController.getForms
 * @path POST /connector/typeform/get-forms
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getForms(
  connection: IConnection,
): Promise<getForms.Output> {
  return !!connection.simulate
    ? getForms.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getForms.METADATA,
        path: getForms.path(),
      });
}
export namespace getForms {
  export type Output = Primitive<Array<ITypeform.IFindFormOutput>>;

  export const METADATA = {
    method: "POST",
    path: "/connector/typeform/get-forms",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/typeform/get-forms";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<ITypeform.IFindFormOutput>>> =>
    typia.random<Primitive<Array<ITypeform.IFindFormOutput>>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
