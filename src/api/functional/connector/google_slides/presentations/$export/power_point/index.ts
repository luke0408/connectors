/**
 * @packageDocumentation
 * @module api.functional.connector.google_slides.presentations.$export.power_point
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IGoogleSlides } from "../../../../../../structures/connector/google_slides/IGoogleSlides";

/**
 * @controller GoogleSlidesController.$export
 * @path POST /connector/google-slides/presentations/:id/export/power-point
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function $export(
  connection: IConnection,
  presentationId: string,
  input: $export.Input,
): Promise<$export.Output> {
  return !!connection.simulate
    ? $export.simulate(connection, presentationId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...$export.METADATA,
          template: $export.METADATA.path,
          path: $export.path(presentationId),
        },
        input,
      );
}
export namespace $export {
  export type Input = Primitive<IGoogleSlides.IExportPresentationInput>;
  export type Output = Primitive<IGoogleSlides.IExportPresentationOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/google-slides/presentations/:id/export/power-point",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (presentationId: string) =>
    `/connector/google-slides/presentations/${encodeURIComponent(presentationId ?? "null")}/export/power-point`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IGoogleSlides.IExportPresentationOutput>> =>
    typia.random<Primitive<IGoogleSlides.IExportPresentationOutput>>(g);
  export const simulate = (
    connection: IConnection,
    presentationId: string,
    input: $export.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(presentationId),
      contentType: "application/json",
    });
    assert.param("presentationId")(() => typia.assert(presentationId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
