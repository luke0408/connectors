/**
 * @packageDocumentation
 * @module api.functional.connector.open_data
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IOpenData } from "../../../structures/connector/open_data/IOpenData";

/**
 * @controller OpenDataController.getUltraSrtNcst
 * @path POST /connector/open-data/getUltraSrtNcst
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUltraSrtNcst(
  connection: IConnection,
): Promise<getUltraSrtNcst.Output> {
  return !!connection.simulate
    ? getUltraSrtNcst.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getUltraSrtNcst.METADATA,
        path: getUltraSrtNcst.path(),
      });
}
export namespace getUltraSrtNcst {
  export type Output =
    Primitive<IOpenData.IKoreaMeteorologicalAdministration.IGetVillageForecastInformationOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/open-data/getUltraSrtNcst",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/open-data/getUltraSrtNcst";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<
    Primitive<IOpenData.IKoreaMeteorologicalAdministration.IGetVillageForecastInformationOutput>
  > =>
    typia.random<
      Primitive<IOpenData.IKoreaMeteorologicalAdministration.IGetVillageForecastInformationOutput>
    >(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
