/**
 * @packageDocumentation
 * @module api.functional.connector.google_ads.campaigns.ads.status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

/**
 * @controller GoogleAdsController.setOnOff
 * @path PATCH /connector/google-ads/campaigns/ads/status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function setOnOff(connection: IConnection): Promise<void> {
  return !!connection.simulate
    ? setOnOff.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...setOnOff.METADATA,
        template: setOnOff.METADATA.path,
        path: setOnOff.path(),
      });
}
export namespace setOnOff {
  export const METADATA = {
    method: "PATCH",
    path: "/connector/google-ads/campaigns/ads/status",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/google-ads/campaigns/ads/status";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<void>> => typia.random<Primitive<void>>(g);
  export const simulate = (connection: IConnection): void => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
