/**
 * @packageDocumentation
 * @module api.functional.connector.google_ads.campaigns.ads
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IGoogleAds } from "../../../../../structures/connector/google_ads/IGoogleAds";

export * as get_keywords from "./get_keywords";
export * as status from "./status";
export * as keywords from "./keywords";
export * as get_details from "./get_details";

/**
 * @controller GoogleAdsController.updateAd
 * @path PUT /connector/google-ads/campaigns/ads
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateAd(
  connection: IConnection,
  input: updateAd.Input,
): Promise<void> {
  return !!connection.simulate
    ? updateAd.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateAd.METADATA,
          template: updateAd.METADATA.path,
          path: updateAd.path(),
        },
        input,
      );
}
export namespace updateAd {
  export type Input = Primitive<IGoogleAds.IGetAdGroupAdDetailInput>;

  export const METADATA = {
    method: "PUT",
    path: "/connector/google-ads/campaigns/ads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/google-ads/campaigns/ads";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<void>> => typia.random<Primitive<void>>(g);
  export const simulate = (
    connection: IConnection,
    input: updateAd.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * 구글 고객 계정의 광고를 생성해요
 *
 * @param input 광고 생성 조건
 * @summary 광고를 생성해요
 * @returns 생성된 광고 정보
 *
 * @controller GoogleAdsController.appendAd
 * @path POST /connector/google-ads/campaigns/ads
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function appendAd(
  connection: IConnection,
  input: appendAd.Input,
): Promise<appendAd.Output> {
  return !!connection.simulate
    ? appendAd.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...appendAd.METADATA,
          template: appendAd.METADATA.path,
          path: appendAd.path(),
        },
        input,
      );
}
export namespace appendAd {
  export type Input = Primitive<IGoogleAds.ICreateAdGroupAdInput>;
  export type Output = Primitive<IGoogleAds.IGetAdGroupAdsOutputResult>;

  export const METADATA = {
    method: "POST",
    path: "/connector/google-ads/campaigns/ads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/google-ads/campaigns/ads";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IGoogleAds.IGetAdGroupAdsOutputResult>> =>
    typia.random<Primitive<IGoogleAds.IGetAdGroupAdsOutputResult>>(g);
  export const simulate = (
    connection: IConnection,
    input: appendAd.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
