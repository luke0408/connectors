/**
 * @packageDocumentation
 * @module api.functional.connector.google_ads.campaigns.ads.keywords
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IGoogleAds } from "../../../../../../structures/connector/google_ads/IGoogleAds";

/**
 * 구글 고객 계정의 특정 광고에서 키워드를 삭제해요
 *
 * 광고 그룹에 다른 광고가 있다면 함께 적용돼요.
 *
 * @param input 키워드 삭제 조건
 * @summary 광고에 키워드를 삭제해요
 * @returns
 *
 * @controller GoogleAdsController.deleteKeywords
 * @path DELETE /connector/google-ads/campaigns/ads/keywords
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteKeywords(
  connection: IConnection,
  input: deleteKeywords.Input,
): Promise<void> {
  return !!connection.simulate
    ? deleteKeywords.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...deleteKeywords.METADATA,
          template: deleteKeywords.METADATA.path,
          path: deleteKeywords.path(),
        },
        input,
      );
}
export namespace deleteKeywords {
  export type Input = Primitive<IGoogleAds.IDeleteAdGroupCriteriaInput>;

  export const METADATA = {
    method: "DELETE",
    path: "/connector/google-ads/campaigns/ads/keywords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/google-ads/campaigns/ads/keywords";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<void>> => typia.random<Primitive<void>>(g);
  export const simulate = (
    connection: IConnection,
    input: deleteKeywords.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * 구글 고객 계정의 광고에 검색 키워드를 추가해요
 *
 * 광고 그룹에 다른 광고가 있다면 함께 적용돼요
 *
 * @param input 키워드 추가 조건
 * @summary 광고에 키워드를 추가해요
 * @returns 추가된 키워드 리소스 이름
 *
 * @controller GoogleAdsController.addKeywords
 * @path POST /connector/google-ads/campaigns/ads/keywords
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function addKeywords(
  connection: IConnection,
  input: addKeywords.Input,
): Promise<addKeywords.Output> {
  return !!connection.simulate
    ? addKeywords.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...addKeywords.METADATA,
          template: addKeywords.METADATA.path,
          path: addKeywords.path(),
        },
        input,
      );
}
export namespace addKeywords {
  export type Input = Primitive<IGoogleAds.ICreateAdGroupCriteriaInput>;
  export type Output = Primitive<IGoogleAds.ICreateAdGroupCriteriaOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/google-ads/campaigns/ads/keywords",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/google-ads/campaigns/ads/keywords";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IGoogleAds.ICreateAdGroupCriteriaOutput>> =>
    typia.random<Primitive<IGoogleAds.ICreateAdGroupCriteriaOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: addKeywords.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
