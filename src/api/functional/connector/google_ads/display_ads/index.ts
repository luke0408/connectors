/**
 * @packageDocumentation
 * @module api.functional.connector.google_ads.display_ads
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { DeepStrictMergeHelper } from "../../../../../utils/types/DeepStrictMerge";
import type { IGoogleAds } from "../../../../structures/connector/google_ads/IGoogleAds";

/**
 * 구글 고객 계정에 광고를 한 번에 만들어요
 *
 * @param input 캠페인부터 광고까지 한 번에 생성하는 조건
 * @summary 구글 계정 광고에 반응형 디스플레이 광고를 한 번에 만들어요
 * @returns 생성된 캠페인부터 광고까지의 정보
 *
 * @controller GoogleAdsController.createDisplayAd
 * @path POST /connector/google-ads/display-ads
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createDisplayAd(
  connection: IConnection,
  input: createDisplayAd.Input,
): Promise<createDisplayAd.Output> {
  return !!connection.simulate
    ? createDisplayAd.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createDisplayAd.METADATA,
          template: createDisplayAd.METADATA.path,
          path: createDisplayAd.path(),
        },
        input,
      );
}
export namespace createDisplayAd {
  export type Input = Primitive<IGoogleAds.ICreateAdGroupDisplayAdAtOnceInput>;
  export type Output = Primitive<
    DeepStrictMergeHelper<
      IGoogleAds.IGetCampaignsOutputResult,
      IGoogleAds.AdWrapper
    >
  >;

  export const METADATA = {
    method: "POST",
    path: "/connector/google-ads/display-ads",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/google-ads/display-ads";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<
    Primitive<
      DeepStrictMergeHelper<
        IGoogleAds.IGetCampaignsOutputResult,
        IGoogleAds.AdWrapper
      >
    >
  > =>
    typia.random<
      Primitive<
        DeepStrictMergeHelper<
          IGoogleAds.IGetCampaignsOutputResult,
          IGoogleAds.AdWrapper
        >
      >
    >(g);
  export const simulate = (
    connection: IConnection,
    input: createDisplayAd.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
