/**
 * @packageDocumentation
 * @module api.functional.connector.google_calendar.event
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { ICommon } from "../../../../structures/connector/common/ISecretValue";
import type { IGoogleCalendar } from "../../../../structures/connector/google_calendar/IGoogleCalendar";

export * as attendees from "./attendees";

/**
 * 구글 캘린더에 이벤트를 추가합니다.
 *
 * @summary 구글 캘린더 이벤트 추가.
 * @param calendarId 이벤트를 추가할 캘린더 고유 ID.
 * @param input 이벤트 추가를 위한 정보.
 * @returns 추가한 이벤트 정보.
 * @tag Google Calendar
 *
 * @controller GoogleCalendarController.createEvent
 * @path POST /connector/google-calendar/:calendarId/event
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createEvent(
  connection: IConnection,
  calendarId: string,
  input: createEvent.Input,
): Promise<createEvent.Output> {
  return !!connection.simulate
    ? createEvent.simulate(connection, calendarId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createEvent.METADATA,
          path: createEvent.path(calendarId),
        },
        input,
      );
}
export namespace createEvent {
  export type Input = Primitive<IGoogleCalendar.IEventRequestBodyInput>;
  export type Output = Primitive<IGoogleCalendar.IGoogleCalendarEvent>;

  export const METADATA = {
    method: "POST",
    path: "/connector/google-calendar/:calendarId/event",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (calendarId: string) =>
    `/connector/google-calendar/${encodeURIComponent(calendarId ?? "null")}/event`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IGoogleCalendar.IGoogleCalendarEvent>> =>
    typia.random<Primitive<IGoogleCalendar.IGoogleCalendarEvent>>(g);
  export const simulate = (
    connection: IConnection,
    calendarId: string,
    input: createEvent.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(calendarId),
      contentType: "application/json",
    });
    assert.param("calendarId")(() => typia.assert(calendarId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * 이벤트를 수정합니다.
 *
 * @summary 구글 캘린더 이벤트 수정.
 * @param calendarId 이벤트가 있는 캘린더 고유 ID.
 * @param eventId 수정할 이벤트 고유 ID.
 * @param input 업데이트 할 이벤트 정보.
 * @returns 업데이트 된 이벤트 정보.
 * @tag Google Calendar
 *
 * @controller GoogleCalendarController.updateEvent
 * @path PUT /connector/google-calendar/:calendarId/event/:eventId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateEvent(
  connection: IConnection,
  calendarId: string,
  eventId: string,
  input: updateEvent.Input,
): Promise<updateEvent.Output> {
  return !!connection.simulate
    ? updateEvent.simulate(connection, calendarId, eventId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...updateEvent.METADATA,
          path: updateEvent.path(calendarId, eventId),
        },
        input,
      );
}
export namespace updateEvent {
  export type Input = Primitive<IGoogleCalendar.IEventRequestBodyInput>;
  export type Output = Primitive<IGoogleCalendar.IGoogleCalendarEvent>;

  export const METADATA = {
    method: "PUT",
    path: "/connector/google-calendar/:calendarId/event/:eventId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (calendarId: string, eventId: string) =>
    `/connector/google-calendar/${encodeURIComponent(calendarId ?? "null")}/event/${encodeURIComponent(eventId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IGoogleCalendar.IGoogleCalendarEvent>> =>
    typia.random<Primitive<IGoogleCalendar.IGoogleCalendarEvent>>(g);
  export const simulate = (
    connection: IConnection,
    calendarId: string,
    eventId: string,
    input: updateEvent.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(calendarId, eventId),
      contentType: "application/json",
    });
    assert.param("calendarId")(() => typia.assert(calendarId));
    assert.param("eventId")(() => typia.assert(eventId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * 이벤트를 삭제합니다.
 *
 * @summary 구글 캘린더 이벤트 삭제.
 * @param calendarId 이벤트가 있는 캘린더 고유 ID.
 * @param eventId 삭제할 이벤트 고유 ID.
 * @tag Google Calendar
 *
 * @controller GoogleCalendarController.deleteEvent
 * @path DELETE /connector/google-calendar/:calendarId/event/:eventId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteEvent(
  connection: IConnection,
  calendarId: string,
  eventId: string,
  input: deleteEvent.Input,
): Promise<void> {
  return !!connection.simulate
    ? deleteEvent.simulate(connection, calendarId, eventId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...deleteEvent.METADATA,
          path: deleteEvent.path(calendarId, eventId),
        },
        input,
      );
}
export namespace deleteEvent {
  export type Input = Primitive<
    ICommon.ISecret<"google", ["https://www.googleapis.com/auth/calendar"]>
  >;

  export const METADATA = {
    method: "DELETE",
    path: "/connector/google-calendar/:calendarId/event/:eventId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (calendarId: string, eventId: string) =>
    `/connector/google-calendar/${encodeURIComponent(calendarId ?? "null")}/event/${encodeURIComponent(eventId ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<void>> => typia.random<Primitive<void>>(g);
  export const simulate = (
    connection: IConnection,
    calendarId: string,
    eventId: string,
    input: deleteEvent.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(calendarId, eventId),
      contentType: "application/json",
    });
    assert.param("calendarId")(() => typia.assert(calendarId));
    assert.param("eventId")(() => typia.assert(eventId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
