/**
 * @packageDocumentation
 * @module api.functional.connector.google_calendar.get_events
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IGoogleCalendar } from "../../../../structures/connector/google_calendar/IGoogleCalendar";

/**
 * 구글 캘린더에 있는 이벤트 목록을 가져옵니다.
 *
 * @summary 구글 캘린더 이벤트 목록 가져오기.
 * @param calendarId 이벤트 목록을 가져올 캘린더 고유 ID.
 * @param input 이벤트 목록을 가져오기 위한 조건.
 * @returns 구글 캘린더 이벤트 목록.
 * @tag Google Calendar
 *
 * @controller GoogleCalendarController.readEvents
 * @path POST /connector/google-calendar/:calendarId/get-events
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function readEvents(
  connection: IConnection,
  calendarId: string,
  input: readEvents.Input,
): Promise<readEvents.Output> {
  return !!connection.simulate
    ? readEvents.simulate(connection, calendarId, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...readEvents.METADATA,
          path: readEvents.path(calendarId),
        },
        input,
      );
}
export namespace readEvents {
  export type Input = Primitive<IGoogleCalendar.IReadGoogleCalendarEventInput>;
  export type Output =
    Primitive<IGoogleCalendar.IReadGoogleCalendarEventOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/google-calendar/:calendarId/get-events",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (calendarId: string) =>
    `/connector/google-calendar/${encodeURIComponent(calendarId ?? "null")}/get-events`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IGoogleCalendar.IReadGoogleCalendarEventOutput>> =>
    typia.random<Primitive<IGoogleCalendar.IReadGoogleCalendarEventOutput>>(g);
  export const simulate = (
    connection: IConnection,
    calendarId: string,
    input: readEvents.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(calendarId),
      contentType: "application/json",
    });
    assert.param("calendarId")(() => typia.assert(calendarId));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
