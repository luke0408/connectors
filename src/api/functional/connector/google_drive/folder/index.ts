/**
 * @packageDocumentation
 * @module api.functional.connector.google_drive.folder
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { ICommon } from "../../../../structures/connector/common/ISecretValue";
import type { IGoogleDrive } from "../../../../structures/connector/google_drive/IGoogleDrive";

/**
 * 구글 드라이브에 새로운 폴더를 생성합니다.
 *
 * @summary 구글 드라이브 폴더 생성.
 * @param input 생성할 폴더 이름.
 * @returns 생성된 폴더 고유 ID.
 * @tag Google Drive
 *
 * @controller GoogleDriveController.createFolder
 * @path POST /connector/google-drive/folder
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createFolder(
  connection: IConnection,
  input: createFolder.Input,
): Promise<createFolder.Output> {
  return !!connection.simulate
    ? createFolder.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...createFolder.METADATA,
          path: createFolder.path(),
        },
        input,
      );
}
export namespace createFolder {
  export type Input = Primitive<IGoogleDrive.ICreateFolderGoogleDriveInput>;
  export type Output = Primitive<IGoogleDrive.ICreateFolderGoogleDriveOutput>;

  export const METADATA = {
    method: "POST",
    path: "/connector/google-drive/folder",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/google-drive/folder";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<IGoogleDrive.ICreateFolderGoogleDriveOutput>> =>
    typia.random<Primitive<IGoogleDrive.ICreateFolderGoogleDriveOutput>>(g);
  export const simulate = (
    connection: IConnection,
    input: createFolder.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * 구글 드라이브에 있는 폴더를 삭제합니다.
 *
 * @summary 구글 드라이브 폴더 삭제.
 * @param id 삭제할 폴더 고유 ID.
 * @tag Google Drive
 *
 * @controller GoogleDriveController.deleteFolder
 * @path DELETE /connector/google-drive/folder/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deleteFolder(
  connection: IConnection,
  id: string,
  input: deleteFolder.Input,
): Promise<void> {
  return !!connection.simulate
    ? deleteFolder.simulate(connection, id, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...deleteFolder.METADATA,
          path: deleteFolder.path(id),
        },
        input,
      );
}
export namespace deleteFolder {
  export type Input = Primitive<
    ICommon.ISecret<"google", ["https://www.googleapis.com/auth/drive"]>
  >;

  export const METADATA = {
    method: "DELETE",
    path: "/connector/google-drive/folder/:id",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (id: string) =>
    `/connector/google-drive/folder/${encodeURIComponent(id ?? "null")}`;
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<void>> => typia.random<Primitive<void>>(g);
  export const simulate = (
    connection: IConnection,
    id: string,
    input: deleteFolder.Input,
  ): void => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(id),
      contentType: "application/json",
    });
    assert.param("id")(() => typia.assert(id));
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
