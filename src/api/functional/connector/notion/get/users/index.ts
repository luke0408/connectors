/**
 * @packageDocumentation
 * @module api.functional.connector.notion.get.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive, Resolved } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { ICommon } from "../../../../../structures/connector/common/ISecretValue";
import type { INotion } from "../../../../../structures/connector/notion/INotion";

/**
 * 워크스페이스에 있는 유저 목록을 조회합니다.
 *
 * @summary 유저 목록 조회
 * @returns 유저 정보들
 * @tag Notion
 *
 * @controller NotionController.getUsers
 * @path POST /connector/notion/get/users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUsers(
  connection: IConnection,
  input: getUsers.Input,
): Promise<getUsers.Output> {
  return !!connection.simulate
    ? getUsers.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getUsers.METADATA,
          path: getUsers.path(),
        },
        input,
      );
}
export namespace getUsers {
  export type Input = Primitive<ICommon.ISecret<"Notion", never>>;
  export type Output = Primitive<Array<INotion.IUserOutput>>;

  export const METADATA = {
    method: "POST",
    path: "/connector/notion/get/users",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/connector/notion/get/users";
  export const random = (
    g?: Partial<typia.IRandomGenerator>,
  ): Resolved<Primitive<Array<INotion.IUserOutput>>> =>
    typia.random<Primitive<Array<INotion.IUserOutput>>>(g);
  export const simulate = (
    connection: IConnection,
    input: getUsers.Input,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
